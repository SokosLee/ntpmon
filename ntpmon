#!/usr/bin/perl -w -T
#
# Author:       Paul Gear
# Copyright:	(c) 2010 Liberty Systems & Software <http://libertysys.com.au/>
# License:	GPLv3 <http://www.gnu.org/licenses/gpl.html>
# Description:  Script to collect, dump, and display NTP health metrics using
#		RRDtool.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.  
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use CGI qw/:standard start_ul/;
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use RRDs;
use Scalar::Util qw(tainted);

# globals
my $debug;
my $res;
my $basedir;
my $libdir;

# constants
my $xff = "0.5";
my $ext = ".rrd";
my $now = time();
my $seconds_in_year = 366 * 24 * 60 * 60;	# includes leap year just to be sure
my $good = 0;
my $marginal = 1;
my $bad = 2;

# process arguments
my $result = GetOptions(
    "debug"		=> \$debug,
    "basedir"		=> \$basedir,
    "libdir"		=> \$libdir,
    "resolution"	=> \$res,
);

# set defaults for globals
$res = 60			unless defined $res;
$debug = (-t 0 ? 1 : 0)		unless defined $debug;
$basedir = "."			unless defined $basedir;
$libdir = "$basedir/lib"	unless defined $libdir;

my $heartbeat = $res * 2;
my @rrd_definition = (
    "DS:insync:GAUGE:$heartbeat:0:1",
    "DS:numdiscards:GAUGE:$heartbeat:0:U",
    "DS:numpeers:GAUGE:$heartbeat:0:U",
    "DS:numsurvivors:GAUGE:$heartbeat:0:U",
    "DS:numunknown:GAUGE:$heartbeat:0:U",
    "DS:offsetdiscards:GAUGE:$heartbeat:0:U",
    "DS:offsetsurvivors:GAUGE:$heartbeat:0:U",
    "DS:reachability:GAUGE:$heartbeat:0:8",
    "RRA:LAST:$xff:1:1440",
    "RRA:MIN:$xff:1:1440",
    "RRA:MAX:$xff:1:1440",
    "RRA:AVERAGE:$xff:1:1440",
    "RRA:LAST:$xff:5:288",
    "RRA:MIN:$xff:5:288",
    "RRA:MAX:$xff:5:288",
    "RRA:AVERAGE:$xff:5:288",
    "RRA:LAST:$xff:60:168",
    "RRA:MIN:$xff:60:168",
    "RRA:MAX:$xff:60:168",
    "RRA:AVERAGE:$xff:60:168",
    "RRA:LAST:$xff:1440:365",
    "RRA:MIN:$xff:1440:365",
    "RRA:MAX:$xff:1440:365",
    "RRA:AVERAGE:$xff:1440:365",
);
my @graph_definition = (
);

# create directories if needed
if (! -d $libdir) {
    mkdir "$libdir" or die "Cannot make directory $libdir: $!";
}
chdir "$libdir" or die "Cannot change directory to $libdir: $!";


##############################################################################
# utilities
##############################################################################

sub usage ()
{
    print STDERR "Usage: $0 [global options] [command] [argument ...]
Commands:
	collect HOSTNAME	Collect and store data for HOSTNAME
	dump HOSTNAME		Display recent data for HOSTNAME
	summary			Display summary page in HTML
	detail HOSTNAME		Display detail page for HOSTNAME in HTML
	help			Display HTML help page
Global options:
	--debug			Display debugging information
	--libdir		Set directory for RRD storage
	--resolution		Set resolution of RRD data (default 1 minute)
";
    exit 1;
}

sub all_hosts ()
{
    my @list;
    for my $f (sort glob "*$ext") {
	my $host = basename($f, $ext);
	#print STDERR "Found $host\n" if $debug;
	push @list, $host;
    }
    return @list;
}

sub untaint ($)
{
    return $_[0] unless tainted($_[0]);
    $_[0] =~ /([\w\s-]+)/;
    return $1;
}

sub fetch_rrd (@)
{
    my ($start, $step, $names, $data) = RRDs::fetch(@_);
    my $err = RRDs::error();
    die "ERROR: $err" if $err;

    # remove empty rows from the returned data set
    my @newdata = ();
    for my $line (@$data) {
        my $count = 0;
        for my $val (@$line) {
	    ++$count if defined $val;
        }
        push @newdata, $line if $count > 0;
    }
    $data = \@newdata;

    return ($start, $step, $names, $data);
}

##############################################################################
# collect data and create/update rrd
##############################################################################

sub ntpmon_collect_host ($)
{
    my $host = untaint($_[0]);
    print "host = $host\n" if $debug;

    # untaint
    $ENV{"PATH"} = "/usr/sbin:/usr/bin:/sbin:/bin";

    # get output from ntpq
    open NTPQ, "ntpq -pn $host|" or die "Cannot open pipe for reading ntpq results: $!";
    my @output = <NTPQ>;
    close NTPQ;

    my $insync = 0;
    my $numdiscards = 0;
    my $numpeers = 0;
    my $numunknown = 0;
    my $numsurvivors = 0;
    my $offsetdiscards = 0;
    my $offsetsurvivors = 0;
    my $reachability = 0;

    for (@output) {
	chomp;

	# skip headers
	next if /remote\s+refid\s+st\s+t\s+when\s+poll\s+reach\s+delay\s+offset\s+jitter/;
	next if /^=+$/;

	# get the tally code in the first column
	my ($tally, $rest) = ($_ =~ /(.)(.*)/);

	# split fields & validate
	my @F = split /\s+/, $rest;
	if ($#F != 9) {
	    print STDERR "Invalid line: $_\n";
	}

	# give the fields sensible names
	my ($peer, $refid, $stratum, $type, $lastpoll, $interval, $reach, $delay, $offset, $jitter) = @F;

	# skip local clock
	next if $refid eq ".LOCL.";

	# see the explanation of tally codes in the ntpq documentation for how these work:
	# - http://psp2.ntp.org/bin/view/Support/TroubleshootingNTP
	# - http://www.eecis.udel.edu/~mills/ntp/html/decode.html#peer
	# - http://www.eecis.udel.edu/~mills/ntp/html/ntpq.html
	if ($tally =~ /[*o]/) {
	    # synced peer
	    $lastpoll = 1 if ($lastpoll eq "-");
	    $insync = 1;
	    ++$numsurvivors;
	    ++$numpeers;
	    $offsetsurvivors += abs($offset);
	} elsif ($tally =~ /[+#]/) {
	    # valid peer
	    ++$numsurvivors;
	    ++$numpeers;
	    $offsetsurvivors += abs($offset);
	} elsif ($tally =~ /[ x.-]/) {
	    # discarded peer
	    ++$numdiscards;
	    ++$numpeers;
	    $offsetdiscards += abs($offset);
	} else {
	    # unknown
	    ++$numunknown;
	    next;
	}

	# determine how many of the last 8 polls succeeded
	my $reachdec = oct($reach);	# convert reach to decimal
	my $bits = $reachdec & 1;	# set lowest bit
	#print "bits = $bits, reach = $reachdec\n";
	my $i = 1;
	while ($i < 8) {		# loop through remaining bits
	    $reachdec >>= 1;
	    $bits += $reachdec & 1;
	    #print "bits = $bits, reach = $reachdec\n";
	    ++$i;
	}
	# reachability = sum of all reachability bit counts (average calculated at end)
	$reachability += $bits;

	# debugging
	print "|$tally|$peer|$lastpoll|$bits($reach)|$offset|\n" if $debug;
    }

    # calculate averages, ensuring we do not divide by zero
    my $avgoffsetsurvivors = $numsurvivors > 0 ? $offsetsurvivors / $numsurvivors : 0;
    my $avgoffsetdiscards = $numdiscards > 0 ? $offsetdiscards / $numdiscards : 0;
    my $avgreachability = $numpeers > 0 ? $reachability / $numpeers : 0;

    # create file if necessary
    if (! -e "$host$ext") {
	RRDs::create( "$host$ext", "--step", "$res", @rrd_definition );
    }

    # add stats
    RRDs::update( "$host$ext", "--template=insync:numdiscards:numpeers:numsurvivors:numunknown:offsetdiscards:offsetsurvivors:reachability", "N:$insync:$numdiscards:$numpeers:$numsurvivors:$numunknown:$avgoffsetdiscards:$avgoffsetsurvivors:$avgreachability" );

}

sub ntpmon_collect (@)
{
    for my $host (@_) {
	ntpmon_collect_host $host;
    }
}

##############################################################################
# dump data from rrd
##############################################################################

sub dump_rrd (@)
{
    my ($start, $step, $names, $data) = @_;

    # cut & paste from the RRDs perldoc page
    print "File:	$_[0]\n";
    print "Start:       ", scalar localtime($start), " ($start)\n";
    print "Resolution:  $step seconds\n";
    print "DS names:    ", join (", ", @$names)."\n";
    print "Data points: ", $#$data + 1, "\n";
    print "Data:\n";

    for my $line (@$data) {
	# skip blank rows
    #    my $count = 0;
    #    for my $val (@$line) {
    #	++$count if defined $val;
    #    }
    #    next unless $count > 0;

	print "  ", scalar localtime($start), " ($start) ";
	$start += $step;
	for my $val (@$line) {
	    if (defined $val) {
		printf "%6.2f ", $val;
	    }
	    else {
		printf "   n/a ";
	    }
	}
	print "\n";
    }

}

sub ntpmon_dump (@)
{
    for my $host (@_) {
	my $minutes = 5;
	my $interval = 60;
	my $time = time();
	my $end = int($time / $interval) * $interval;
	#my $strt = $end - $interval;
	#print "time = $time, strt = $strt, end = $end\n";
	print "time = $time, end = $end\n" if $debug;

	#dump_rrd( "$host$ext", "LAST", "-s", "$end-${res}sec", "-e", "$end" );
	dump_rrd( fetch_rrd( "$host$ext", "AVERAGE", "-r", $interval, "-s", "$end-${minutes}min",
	    "-e", "$end" ) );
    }
}

##############################################################################
# HTML summary page
##############################################################################

my @headings = (
    "Host",
    "Last poll",
    "Last sync",
    "Configured peers",
    "Working peers",
    "Average working peer offset",
    "Average peer reachability",
);
my @statnames = (
    "",
    "lastpoll",
    "lastsync",
    "numpeers",
    "numsurvivors",
    "offsetsurvivors",
    "reachability",
);
my %statformats = (
    lastpoll		=> "TIME",
    lastsync		=> "TIME",
    numpeers		=> "%d",
    numsurvivors	=> "%d",
    offsetsurvivors	=> "%5.3f",
    reachability	=> "%5.3f",
);

sub headings (@)
{
    my $ret = "";
    for my $i (0 .. $#headings) {
	if ($statnames[$i] eq "") {
	    $ret .= th( { -class => "header" }, $headings[$i] );
	}
	else {
	    $ret .= th( { -class => "header" },
		a( {href => "help.html\#$statnames[$i]"}, $headings[$i] ) );
	}
	$ret .= "\n";
    }
    return $ret;
}

# get the timestamp when insync was last true
sub get_last_insync ($$)
{
    my $file = $_[0];
    my $time = $_[1];
    my $insync = 0;

    # maximum time to go back = 1 year
    while ($now - $time < $seconds_in_year) {
	my @result = fetch_rrd($file, "LAST", "-s", $time, "-e", $time);
	#dump_rrd(@result);
	my ($start, $step, $names, $data) = @result;
	if ($names->[0] ne "insync") {
	    warn "Expected insync as first DS, but got $names->[0]";
	    next;
	}
	#print "data has $#$data elements\n" if $debug;
	if ($#$data > -1) {
	    $insync = $data->[$#$data]->[0];
	    #print "insync (" . localtime($time) . ") = $insync\n" if $debug;
	    if ($insync) {
		return $time;
	    }
	}
	$time -= $res;
    }

    # if we get here, time was never in sync
    return 0;
}

# return the last recorded values in a hash
sub get_host_rrd ($)
{
    my $file = "$_[0]$ext";
    my $lastpoll = RRDs::last($file);
    my $lastsync = get_last_insync($file, $lastpoll);
    my ($start, $step, $names, $data) = fetch_rrd($file, "LAST", "-s", $lastpoll-$res*3,
	"-e", $lastpoll);
#    print "start = $start, step = $step, lastpoll = $lastpoll, lastsync = $lastsync\n"
#	if $debug;
    my $ret;
    $ret->{"lastsync"} = $lastsync;
    $ret->{"lastpoll"} = $lastpoll;
    for my $i (0 .. $#$names) {
	#print "$names->[$i] = $data->[$#$data]->[$i]\n";
	$ret->{$names->[$i]} = $data->[$#$data]->[$i];
    }
    return $ret;
}

# work out which of the stats are good, bad, or marginal
# return the result for each stat, an overall result, and the name of the worst stat
sub analyse_stats ($)
{
    my $stats = $_[0];

    my $worst = $good;	# severity of the worst stat
    my $results;

    my %rules = (
	lastsync	=> [ $now-2048, $now-1025, [ $bad, $good, $marginal ] ],
	numpeers	=> [  2,   2, [ $bad, $good, $marginal ] ],
	numsurvivors	=> [  2,   2, [ $bad, $good, $marginal ] ],
	offsetsurvivors	=> [ 25, 500, [ $good, $bad, $marginal ] ],
	reachability	=> [  5,   7, [ $bad, $good, $marginal ] ],
    );

    my %sevcodes = ( 0 => "good", 1 => "marginal", 2 => "bad" );

    # loop through selected stats and decide which is the worst
    for my $stat (keys %rules) {
	my $val = $stats->{$stat};
	my $low = $rules{$stat}->[0];
	my $high = $rules{$stat}->[1];
	my $status = $rules{$stat}->[2];

	my $newsev = 0;
	if ($val < $low) {
	    $newsev = $status->[0];
	}
	elsif ($val > $high) {
	    $newsev = $status->[1];
	}
	else {
	    $newsev = $status->[2];
	}
	$results->{$stat} = $sevcodes{$newsev};
	if ($newsev > $worst) {
	    $worst = $newsev;
	    $results->{"worst"} = $stat;
	}

	#print "stat = $stat, val = $val, low = $low, high = $high, sev = $worst ($sevcodes{$worst})\n";
    }
    $results->{"overall"} = $sevcodes{$worst};

    #print "overall = $sevcodes{$worst}, worst = $results{'worst'}\n";
    return $results;
}

# get the host's stats from the database
# analyse the host stats and include a good/marginal/bad status
# return the results in a hash
sub get_host_stats ($)
{
    my $stats = get_host_rrd $_[0];
    my $results = analyse_stats( $stats );
    #print Dumper($stats, $results);
    return ($stats, $results);
}

# TODO: return all the stats for the given host in HTML td elements with appropriate links
sub host_stats ($$$)
{
    my ($host, $stats, $results) = @_;
    my $ret = "";
    for my $statname (@statnames) {
	next if $statname eq "";
	#print "$statname = $stats->{$statname} -> ";
	my $statstr;
	if ($statformats{$statname} eq "TIME") {
	    $statstr = localtime($stats->{$statname});
	}
	else {
	    $statstr = sprintf( $statformats{$statname}, $stats->{$statname} );
	}
	#print "$statstr\n";
	my %html_attrs;
	if (exists $results->{$statname}) {
	    $html_attrs{"-class"} = $results->{$statname};
	}
	$ret .= td( \%html_attrs, $statstr ) . "\n";
    }
    return $ret;
}

# return an appropriate link to the host
sub host_link ($$)
{
    my ($host, $results) = @_;
    my $extra = "";
    if (exists $results->{"worst"}) {
	$extra = "&metric=$results->{'worst'}";
    }
    return a({href => "hostdetail?host=$host$extra"}, $host);
}

# return an HTML Tr containing all the data for a given host
sub host_tr ($)
{
    my $host = $_[0];
    #print "host: $host\n";
    my ($stats, $results) = get_host_stats($host);
    return Tr(
	th({ -class => $results->{"overall"} }, host_link($host, $results)) . "\n",
	host_stats($host, $stats, $results)
    );
}

sub host_rows (@)
{
    return map( host_tr($_), @_ );
}

sub ntpmon_summary ()
{
    my $title = "NTP status summary";

    print
	header(),
	start_html(
	    -title	=> $title,
	    -style	=> { src => "style/style.css" },
	    -meta	=> { Refresh => "300" },
	),
	h3( $title ), "\n",
	p( "Current time: " . localtime($now) ), "\n",
	table( Tr( headings() ), host_rows( all_hosts() ) ),
	end_html();
}

##############################################################################
# main
##############################################################################

# get parameters
my $command = shift;

# call appropriate function for argument
if (! defined $command) {
    usage;
}
elsif ($command eq "collect") {
    if ($#ARGV < 0) {
	@ARGV = all_hosts();
    }
    ntpmon_collect @ARGV;
}
elsif ($command eq "dump") {
    if ($#ARGV < 0) {
	@ARGV = all_hosts();
    }
    ntpmon_dump @ARGV;
}
#elsif ($command eq "summary") {
#    ntpmon_summary;
#}
else {
    ntpmon_summary;
}

