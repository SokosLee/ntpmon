#!/usr/bin/perl -w
#
# Author:       Paul Gear
# Copyright:	(c) 2010 Liberty Systems & Software <http://libertysys.com.au/>
# License:	GPLv3 <http://www.gnu.org/licenses/gpl.html>
# Description:  Query ntp server RRD created by check-ntp
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.  
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use RRDs;

my $host = shift;
$host = "localhost" if ! defined $host;

my $debug;
$debug = 1 if -t 0;

# directory setup
my $basedir = ".";
my $libdir = "$basedir/lib";
if (! -d $libdir) {
    mkdir "$libdir" or die "Cannot make directory $libdir: $!";
}
chdir "$libdir" or die "Cannot change directory to $libdir: $!";

my $res = 60;
my $minutes = 5;
my $interval = 60;
my $time = time();
my $end = int($time / $interval) * $interval;
#my $strt = $end - $interval;
#print "time = $time, strt = $strt, end = $end\n";
print "time = $time, end = $end\n";

sub fetch_rrd (@)
{
    my ($start, $step, $names, $data) = RRDs::fetch(@_);
    my $err = RRDs::error();
    die "ERROR: $err" if $err;

    # cut & paste from the RRDs perldoc page
    print "Start:       ", scalar localtime($start), " ($start)\n";
    print "Step size:   $step seconds\n";
    print "DS names:    ", join (", ", @$names)."\n";
    print "Data points: ", $#$data + 1, "\n";
    print "Data:\n";

    for my $line (@$data) {
	# skip blank rows
    #    my $count = 0;
    #    for my $val (@$line) {
    #	++$count if defined $val;
    #    }
    #    next unless $count > 0;

	print "  ", scalar localtime($start), " ($start) ";
	$start += $step;
	for my $val (@$line) {
	    if (defined $val) {
		printf "%6.2f ", $val;
	    }
	    else {
		printf "   n/a ";
	    }
	}
	print "\n";
    }

}

#fetch_rrd( "$host.rrd", "LAST", "-s", "$end-${res}sec", "-e", "$end" );
#fetch_rrd( "$host.rrd", "AVERAGE", "-s", "$end-${res}sec", "-e", "$end" );
fetch_rrd( "$host.rrd", "AVERAGE", "-r", $interval, "-s", "$end-${minutes}min", "-e", "$end" );

